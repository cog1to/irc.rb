diff --git a/irc.rb b/irc.rb
index 2514c78..a6039b8 100755
--- a/irc.rb
+++ b/irc.rb
@@ -5,2 +5,3 @@ require "io/console"
 require 'optparse'
+require "unicode"
 
@@ -671,4 +672,4 @@ class Message
 		time = "%02d:%02d" % [@time.hour, @time.min]
-		visible_text = text
-		prefix_length = time.length + 1
+		visible_text = Unicode::text_elements(text.force_encoding("UTF-8"))
+		prefix_length = Unicode::width(time, true) + 1
 
@@ -685,3 +686,3 @@ class Message
 				line = "#{time_style}#{time}\033[0m #{nick_style}#{nick}\033[0m #{text_style}"
-				count += time.length + nick.length + 2
+				count += Unicode::width(time, true) + Unicode::width(nick, true) + 2
 			elsif (count == 0) then
@@ -704,3 +705,3 @@ class Message
 			# If we got to the end of the terminal line, append line to the output.
-			if (count == cols || idx == visible_text.length) then
+			if (count >= cols || idx == visible_text.length) then
 				if idx == visible_text.length || last_break == start then
@@ -721,3 +722,3 @@ class Message
 
-						if m = /\A\d\d?(,\d\d?)?/.match(visible_text[i..-1]) then
+						if m = /\A\d\d?(,\d\d?)?/.match(visible_text[i..-1].join) then
 							line << Term::from_irc(m[0])
@@ -775,3 +776,3 @@ class Message
 					idx += 1
-					if m = /\A\d\d?(,\d\d?)?/.match(visible_text[idx..-1]) then
+					if m = /\A\d\d?(,\d\d?)?/.match(visible_text[idx..-1].join) then
 						idx += m[0].length
@@ -790,3 +791,3 @@ class Message
 				# Normal symbol, just append to the current segment length.
-				idx, count = idx + 1, count + 1
+				idx, count = idx + 1, count + Unicode::width(visible_text[idx])
 			end
@@ -1365,4 +1366,5 @@ class App
 		@first_message = true
-		@input_buffer = ""
+		@input_buffer = []
 		@input_offset = 0
+		@symbol_buffer = ""
 
@@ -1810,4 +1812,15 @@ class App
 		content = @history_offset < 0 ? @history[@history_offset] : @input_buffer
-		line = content[([0, content.length - @size[:cols] + 4].max)..-1]
-		print("\033[#{@size[:lines]};1H>> #{line}\033[0K")
+		# Get how much symbols we can fit
+		max_width = @size[:cols] - 4
+		line, offset = [], -1
+		if Unicode.width(content.join) <= max_width then
+			line = content
+		else
+			while Unicode.width(line.join, true) < max_width && content.length + offset >= 0 do
+				line = content[offset..]
+				offset -= 1
+			end
+		end
+		# Print the input.
+		print("\033[#{@size[:lines]};1H>> #{line.join}\033[0K")
 
@@ -1815,3 +1828,3 @@ class App
 		if @input_offset > 0 then
-			print("\033[#{@input_offset}D")
+			print("\033[#{Unicode::width(@input_buffer[-@input_offset..].join, true)}D")
 		end
@@ -1984,3 +1997,2 @@ class App
 				update_buffer(message)
-
 				# Send the message to client.
@@ -2032,3 +2044,3 @@ class App
 			# Reset buffer and send
-			text, @input_buffer, @input_offset = @input_buffer, "", 0
+			text, @input_buffer, @input_offset = @input_buffer.join, [], 0
 			parse_and_send(text)
@@ -2047,3 +2059,3 @@ class App
 				else
-					@input_buffer = ""
+					@input_buffer = []
 				end
@@ -2056,3 +2068,3 @@ class App
 				else
-					@input_buffer = ""
+					@input_buffer = []
 				end
@@ -2103,3 +2115,6 @@ class App
 				@input_offset = [@input_buffer.length, @input_offset + 1].min
-				print("\033[1D") if (old_offset != @input_offset)
+				if old_offset != @input_offset then
+					console_offset = Unicode::width(@input_buffer[-@input_offset], true)
+					print("\033[#{console_offset}D")
+				end
 			when :ARROW_RIGHT
@@ -2107,3 +2122,6 @@ class App
 				@input_offset = [0, @input_offset - 1].max
-				print("\033[1C") if (old_offset != @input_offset)
+				if old_offset != @input_offset then
+					console_offset = Unicode::width(@input_buffer[-@input_offset-1], true)
+					print("\033[#{console_offset}C")
+				end
 			end
@@ -2112,5 +2130,11 @@ class App
 		@input.on_append = lambda { |x|
-			@input_buffer.insert(@input_buffer.length - @input_offset, x)
-			@history_offset = 0
-			draw_input
+			@symbol_buffer += x
+			dup = @symbol_buffer.dup.force_encoding("UTF-8")
+			if Unicode::width(dup) > 0 then
+				@input_buffer.insert(@input_buffer.length - @input_offset, dup)
+				@symbol_buffer = ""
+				# Update input field
+				@history_offset = 0
+				draw_input
+			end
 		}
